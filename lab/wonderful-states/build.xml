<!--
	ANT Build file
	FML Mar/2010 (c) All rights reserved.

        Look for "CHANGE HERE"
-->    

<project name="Wonderful States" default="help" basedir="."> <!-- CHANGE HERE -->

    <description>
            ANT Build file.
    </description>

    <tstamp/>

    <!-- CHANGE HERE -->
    <property name="version" value="1.0-alpha"/>
    <property name="project" value="Wonderful States"/>
    <property name="name.simple" value="wonderfulstates"/>
    <property name="author" value="FML"/>
    <property name="package.root" value="br.eti.fml"/>
    <property name="with.debug" value="true"/> <!-- "off" or "true" -->

    <!-- CHANGE HERE (only if necessary) -->
    <property name="package" value="${package.root}.${name.simple}"/>
    <property name="main" value="${package}.Main"/>
    <property name="name.file" value="${name.simple}-${version}"/>
    <property name="name.file.stamp" value="${name.file}-${DSTAMP}-${TSTAMP}"/>

    <property name="base" value="."/>
    <property name="src" value="src/java"/>
    <property name="jars" value="jars"/>
    <property name="deploy" value="deploy"/>
    <property name="deploy.jars" value="deploy/${jars}"/>
    <property name="classes" value="deploy/classes"/>
    <property name="archive" value="deploy/archive"/>
    <property name="release" value="deploy/release"/>
    <property name="doc" value="doc/api/javadoc"/>
    <property name="tempdir" value="temp"/>
    <property name="lib" value="lib/jar"/>
    <property name="bin" value="bin"/>
    <property name="etc" value="etc"/>
    <property name="prj" value="prj"/>
    <property name="etc.doc" value="${etc}/doc"/>
    <property name="etc.deploy" value="${etc}/deploy"/>
    <property name="dll.dst" value="${deploy}"/>

    <!-- CHANGE HERE -->
    <property name="classpath" value="${deploy}/classes;.;${lib}"/>

    <!-- Separated by spaces -->
    <property name="classpath.jar" value="${name.file}.jar"/>

    <target name="init">      
        <echo message="starting..."/>
    </target>
        
    <target name="help">
            <echo message="Try with -projecthelp for help."/>
    </target>

    <target name="clean" depends="init" description="Delete compiled classes.">
        <delete dir="${classes}"/>
        <delete dir="${classes.teste}"/>
        <delete dir="${tempdir}"/>
    </target>

    <target name="clean.all" depends="init"
                    description="Clean all that can have been created."
    >
        <delete dir="${deploy}"/>
        <delete dir="${doc}"/>
        <mkdir dir="${deploy}"/>
    </target>
    
    <target name="run" depends="compile"
            description="Run the project"
    >
            <echo message="Start of project..."/>
            <java fork="true" jar="${deploy.jars}/${name.file}.jar"
                            classpath="${classpath}"
            >
                <jvmarg value="-XX:+AggressiveHeap"/>
            </java>

            <echo message="End of project..."/>
    </target>

    <target name="compile" depends="init" description="Compile the project.">		
            <mkdir dir="${deploy}"/>
            <mkdir dir="${deploy.jars}"/>
            <mkdir dir="${classes}"/>

            <javac srcdir="${src}" classpath="${classpath}" destdir="${classes}"
                            debug="${with.debug}" nowarn="true"
            >
                    <compilerarg value="-Xlint"/> 
            </javac>

            <!-- ${src} is copied to ${classes} (except the java source files) -->
            <copy todir="${classes}" overwrite="true">
                    <fileset dir="${src}">
                            <exclude name="**/*.java"/>
                    </fileset>
            </copy>

            <jar jarfile="${deploy.jars}/${name.file}.jar" basedir="${classes}">
                <!-- excludes="**/**Teste**" -->
                <manifest>
                    <attribute name="Built-By" value="${author}"/>
                    <attribute name="Main-Class" value="${main}"/>
                    <attribute name="Class-Path" value="${classpath.jar}"/>
                </manifest>
            </jar>

            <!-- All content of lib/jar are copied to the deploy's root -->
            <copy todir="${deploy.jars}" overwrite="true" failonerror="false">
                    <fileset dir="${lib}">
                            <include name="*.jar"/>
                    </fileset>
            </copy>          
  
            <!-- All content of bin are copied to deploy's root -->
            <copy todir="${deploy}" overwrite="true" failonerror="false">
                    <fileset dir="${bin}">
                            <include name="*.*"/>
                    </fileset>
            </copy>

            <!-- All content of etc/deploy are copied to deploy's root -->
            <copy todir="${deploy}" overwrite="true" failonerror="false">
                    <fileset dir="${etc.deploy}">
                            <exclude name="**/leiame.txt"/>
                    </fileset>
            </copy>

            <!-- All content of etc/deploy are copied to the project's root -->
            <copy todir="${base}" overwrite="true" failonerror="false">
                    <fileset dir="${etc.deploy}">
                            <exclude name="**/leiame.txt"/>
                    </fileset>
            </copy>

            <!-- All config files from the project's root are copied to deploy -->
            <copy todir="${deploy}" overwrite="true" failonerror="false">
                    <fileset dir="${base}">
                            <include name="config.xml"/>
                    </fileset>
            </copy>            

    </target>
	
    <target name="compile.all" depends="clean,compile"
            description="Clean and after compile the project (maybe slow)."
    />
    
    <target name="document" depends="compile" description="Make the project API.">
        <!--<delete dir="${doc}"/>-->
        <mkdir dir="${doc}"/>
        <javadoc sourcepath="${src}" destdir="${doc}" classpath="${classpath}"
                author="true" version="true" use="true"
                packagenames="*" doctitle="${project} ${version} API"
                charset="UTF-8"
                windowtitle="${project} ${version} API"
        />

        <!-- All content of etc/doc are copied to the javadoc's root -->
        <copy todir="${doc}" overwrite="true" failonerror="false">
                <fileset dir="${etc.doc}">
                        <exclude name="**/leiame.txt"/>
                </fileset>
        </copy>
    </target>

    <target name="release" depends="compile"
                    description="Make a release, without archive. Use 'dist' instead this."
    >
            <delete dir="${release}"/>
            <mkdir dir="${release}"/>
            <mkdir dir="${release}/${jars}"/>

            <copy file="${deploy.jars}/${name.file}.jar"
                tofile="${release}/${jars}/${name.file}.jar"
            />

            <!-- All content of bin are copied to the release's root -->
            <copy todir="${release}" overwrite="true" failonerror="false">
                    <fileset dir="${bin}">
                            <include name="*.*"/>
                    </fileset>
            </copy>

            <!-- All DLL's from bin are copied to the project's root as well -->
            <copy todir="${release}" overwrite="true" failonerror="false">
                    <fileset dir="${bin}">
                            <include name="**/*.dll"/>
                            <exclude name="**/leiame.txt"/>
                    </fileset>
            </copy>
            
            <!-- All content of etc/deploy are copied to the release's root -->
            <copy todir="${release}" overwrite="true">
                    <fileset dir="${etc.deploy}">
                            <exclude name="**/leiame.txt"/>
                    </fileset>
            </copy>

            <checksum file="${release}/${jars}/${name.file}.jar"/>

            <copy todir="${release}/${jars}">
                    <fileset dir="${lib}"/>
            </copy>

    </target>

    <target name="archive" depends="release"
                    description="Archive the release. Use 'dist' instead of this."
    >
            <mkdir dir="${archive}"/>

            <zip zipfile="${archive}/${name.file.stamp}.zip"
                     basedir="${release}"
                     comment="${project} ${version} - Related of ${name.file.stamp}."
            />

            <checksum file="${archive}/${name.file.stamp}.zip"/>
    </target>

    <target name="dist" depends="release,archive"
			description="Make a new distribution."
    />

    <target name="zip.all" depends="release"
                    description="Zip all project on temp, except the deploy/archive."
    >
            <mkdir dir="${tempdir}"/>

            <zip zipfile="${tempdir}/${name.file.stamp}-all.zip"
                     basedir="."
                     excludes="deploy/archive/**, temp/**"
                     comment="${project} ${version} - All ziped project, with source and build.xml"
            />

    </target>

</project>